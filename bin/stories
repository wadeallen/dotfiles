#!/usr/bin/env python3

import frontmatter
import os
import glob
import wget
import re
from titlecase import titlecase
import operator

# surpresses the download message of files
def bar_none(current, total, width=80):
    return '';

def format_slug(text):
	title_sliced = text.split()
	slug = ("-".join(title_sliced).lower())
	slug = slug.replace("?", "")
	slug = slug.replace("'", "")
	slug = re.sub("[\(\[].*?[\)\]]", "", slug)
	return slug

# move to directory in Dropbox to do the work
stories_dir = '/home/wadeallen/Dropbox/Stories/'
os.chdir(stories_dir)

# delete old files
os.system('rm ' + stories_dir + '*.md')

# file downloaded from Google Docs and stored as local text file
# it is worth noting that the Google Doc must be shared with an editable link
file_name = "stories.txt"
url = 'https://docs.google.com/document/d/1gKLaR2rWaPUAiBeqDUqhrrEDuw0g11Q9N2mp4GcFSLc/export?format=txt'
wget.download(url, file_name, bar = bar_none)

# The file is then split into multiple files
# Be sure to have a file split at the beginning of the document
files = open(file_name,'r').read().split('*****')
names = ['story-'+ str(num) + '.md' for num in range(len(files))]
for num,file in enumerate(files):
    open(names[num],'w').write(file)

# Remove these files, no longer needed
os.remove('story-0.md')
os.remove('stories.txt')

# Grab stories for further use from the text files
path = 'story-[1-9]*.md'
stories = glob.glob(path)
stories =  sorted(stories)

# Sort out Stories for Website
website_dir = '/home/wadeallen/Sites/fbcmuncie_2018/_news/'
os.system('rm ' + website_dir + '*.md')
for story in stories:
	post = frontmatter.load(story)
	if 'website' in post['publications']:
		title = post['title']
		title = titlecase(title)
		slug = format_slug(title)
		filename = website_dir + slug + '.md'
		target = open (filename, 'w')
		target.write("---\n")
		target.write("title: {}\n".format(title))
		target.write("weight: {}\n".format(post['weight']))
		target.write("---\n")
		target.write("\n")
		# replaces content of print with website version of file
		post.content = re.sub(r'\{\{print:(.*?)\}\}*\{\{website:(.*?)\}\}', r'\2', post.content.rstrip())
		target.write(post.content)
		target.close()

# Create LaTeX file for Bulletin
bulletin_path = '/home/wadeallen/Dropbox/Pandoc/Pandoc_Bulletin/'
os.system('rm ' + bulletin_path + 'articles.txt')
article_list = []
for story in stories:
	post = frontmatter.load(story)
	if 'bulletin' in post['publications']:
		title = post['title']
		title = titlecase(title)
		content = re.sub(r'\{\{print:(.*?)\}\}*\{\{website:(.*?)\}\}', r'\1', post.content.rstrip())
		content = content.replace(r"\n", r"\n\n")
		# forms a sublist that includes title[0], content[1], weight[2]
		article = [title, content, post['weight']]
		# builds the article list with a sublist of each article
		article_list.append(article)

# sorts articles by weight[2]
article_list.sort(key=lambda x: int(x[2]))

# interates through each article (sorted by weight) and places them in the articles.txt file to be compiled by the visitor script
for article in article_list:
	with open(bulletin_path + "articles.txt", "a") as bulletin_file:
		bulletin_file.write('\n\n')
		bulletin_file.write('## ' + article[0] + '\n\n')
		bulletin_file.write(article[1] + '\n\n')
		bulletin_file.write('\\vspace{\\fill}')

# Create file for Visitor
visitor_path = '/home/wadeallen/Dropbox/Pandoc/Pandoc_Visitor/'
os.system('rm ' + visitor_path + 'articles.txt')
article_list = []
for story in stories:
	post = frontmatter.load(story)
	if 'visitor' in post['publications']:
		title = post['title']
		# makes all of the titles titlecase
		title = titlecase(title)
		if post.get('picture') != None:
			picture = post.get('picture')
		else:
			picture = 'no picture'
		# for these articles, the print section is used and the website section is taken out
		content = re.sub(r'\{\{print:(.*?)\}\}*\{\{website:(.*?)\}\}', r'\1', post.content.rstrip())
		content = content.replace(r"\n", r"\n\n")
		# forms a sublist that includes title[0], content[1], weight[2]
		article = [title, content, post['weight'], picture]
		# builds the article list with a sublist of each article
		article_list.append(article)

# sorts articles by weight[2]
article_list.sort(key=lambda x: int(x[2]))

# interates through each article (sorted by weight) and places them in the articles.txt file to be compiled by the visitor script
for article in article_list:
	with open(visitor_path + "articles.txt", "a") as visitor_file:
			visitor_file.write('\n\n')
			visitor_file.write('# ' + article[0] + '\n\n')
			# if the article has a picture: name then it will place the latex code to generate that picture, if not, it will do nothing.
			if article[3] != 'no picture':
				visitor_file.write('\\setlength\intextsep{0pt}')
				visitor_file.write('\\begin{wrapfigure}{r}{3cm}\n')
				visitor_file.write('\includegraphics[width=3cm]{people/' + article[3] + '}\n')
				visitor_file.write('\end{wrapfigure}\n\n')
			visitor_file.write(article[1] + '\n\n')

with open(visitor_path + "articles.txt", "a") as visitor_file:
	visitor_file.write('\n\input{includes/birthdays.tex}\n')


