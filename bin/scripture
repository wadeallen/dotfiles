#!/usr/bin/env python3

import argparse
import re
import json

class Text:
    def __init__(self):
        # Check for books
        if hasattr(self, 'books'):
            # make sure it is a dictionary
            if not isinstance(self.books, dict):
                raise Exception('"books" should be a dictionary, who\'s values are four valued tuples (Book Name, Abbreviation, Regex, [ch1_verse_count, ch2_verse_count, ...])')

            # set the regex instance variables
            self.book_re_string ='|'.join(b[2] for b in self.books.values())
            self.book_re = re.compile(self.book_re_string, re.IGNORECASE | re.UNICODE)

            # set instance compiled scripture reference regex
            self.scripture_re = re.compile(
                r'\b(?P<BookTitle>%s)\s*' \
                 '(?P<ChapterNumber>\d{1,3})' \
                 '(?:\s*:\s*(?P<VerseNumber>\d{1,3}))?' \
                 '(?:\s*[-\u2013\u2014]\s*' \
                 '(?P<EndChapterNumber>\d{1,3}(?=\s*:\s*))?' \
                 '(?:\s*:\s*)?' \
                 '(?P<EndVerseNumber>\d{1,3})?' \
                 ')?' % (self.book_re_string,), re.IGNORECASE | re.UNICODE)

        else:
            raise Exception('Text has no "books"')

    def get_book(self, name):
        """
        Get a book from its name or None if not found
        """
        for book in self.books.values():
            if re.match('^%s$' % book[2], name, re.IGNORECASE):
                return book

        return None

    def extract(self, text):
        """
        Extract a list of tupled scripture references from a block of text
        """
        references = []
        for r in re.finditer(self.scripture_re, text):
            try:
                references.append(self.normalize_reference(*r.groups()))
            except InvalidReferenceException:
                pass
        return references

    def is_valid_reference(self, bookname, chapter, verse=None,
                                     end_chapter=None, end_verse=None):
        """
        Check to see if a scripture reference is valid
        """
        try:
            return self.normalize_reference(bookname, chapter, verse,
                end_chapter, end_verse) is not None
        except InvalidReferenceException:
            return False

    def reference_to_string(self, bookname, chapter, verse=None,
                            end_chapter=None, end_verse=None):
        """
        Get a display friendly string from a scripture reference
        """
        book=None

        bn, c, v, ec, ev = self.normalize_reference(bookname, chapter, verse,
            end_chapter, end_verse)

        book = self.get_book(bn)

        if c == ec and len(book[3]) == 1: # single chapter book
            if v == ev: # single verse
                return '{0} {1}'.format(bn, v)
            else: # multiple verses
                return '{0} {1}-{2}'.format(bn, v, ev)
        else: # multichapter book
            if c == ec: # same start and end chapters
                if v == 1 and ev == book[3][c-1]: # full chapter
                    return '{0} {1}'.format(bn, c)
                elif v == ev: # single verse
                    return '{0} {1}:{2}'.format(bn, c, v)
                else: # multiple verses
                    return '{0} {1}:{2}-{3}'.format(
                        bn, c, v, ev)
            else: # multiple chapters
                if v == 1 and ev == book[3][ec-1]: # multichapter ref
                    return '{0} {1}-{2}'.format(bn, c, ec)
                else: # multi-chapter, multi-verse ref
                    return '{0} {1}:{2}-{3}:{4}'.format(bn, c, v, ec, ev)

    def normalize_reference(self, bookname, chapter, verse=None,
                                      end_chapter=None, end_verse=None):
        """
        Get a complete five value tuple scripture reference with full book name
        from partial data
        """
        book = self.get_book(bookname)

        # SPECIAL CASES FOR: BOOKS WITH ONE CHAPTER AND MULTI-CHAPTER REFERENCES

        # If the ref is in format: (Book, #, None, None, ?)
        # This is a special case and indicates a reference in the format: Book 2-3
        if chapter is not None and verse is None and end_chapter is None:
            # If there is only one chapter in this book, set the chapter to one and
            # treat the incoming chapter argument as though it were the verse.
            # This normalizes references such as:
            # Jude 2 and Jude 2-4
            if len(book[3]) == 1:
                verse=chapter
                chapter=1
            # If the ref is in format: (Book, ?, None, None, #)
            # This normalizes references such as: Revelation 2-3
            elif end_verse:
                verse=1
                end_chapter=end_verse
                end_verse=None
        # If the ref is in the format (Book, #, None, #, #)
        # this is a special case that indicates a reference in the format Book 3-4:5
        elif chapter is not None and verse is None and end_chapter is not None:
            # The solution is to set the verse to one, which is what is
            # most likely intended
            verse = 1


        # Convert to integers or leave as None
        chapter = int(chapter) if chapter else None
        verse = int(verse) if verse else None
        end_chapter = int(end_chapter) if end_chapter else chapter
        end_verse = int(end_verse) if end_verse else None
        if not book \
        or (chapter is None or chapter < 1 or chapter > len(book[3])) \
        or (verse is not None and (verse < 1 or verse > book[3][chapter-1])) \
        or (end_chapter is not None and (
            end_chapter < 1
            or end_chapter < chapter
            or end_chapter > len(book[3]))) \
        or (end_verse is not None and(
            end_verse < 1
            or (end_chapter and end_verse > book[3][end_chapter-1])
            or (chapter == end_chapter and end_verse < verse))):
            raise InvalidReferenceException()

        if not verse:
            return (book[0], chapter, 1, chapter, book[3][chapter-1])
        if not end_verse:
            if end_chapter and end_chapter != chapter:
                end_verse = book[3][end_chapter-1]
            else:
                end_verse = verse
        if not end_chapter:
            end_chapter = chapter
        return (book[0], chapter, verse, end_chapter, end_verse)


class niv(Text):
    books = {
        'gen': ('Genesis', 'Gen', 'Gen(?:esis)?', [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 55, 32, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26]),
        'exod': ('Exodus', 'Exod', 'Exod(?:us)?', [22, 25, 22, 31, 23, 30, 25, 32, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 36, 31, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38]),
        'lev': ('Leviticus', 'Lev', 'Lev(?:iticus)?', [17, 16, 17, 35, 19, 30, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34]),
        'num': ('Numbers', 'Num', 'Num(?:bers)?', [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 50, 13, 32, 22, 29, 35, 41, 30, 25, 18, 65, 23, 31, 40, 16, 54, 42, 56, 29, 34, 13]),
        'deut': ('Deuteronomy', 'Deut', 'Deut(?:eronomy)?', [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 32, 18, 29, 23, 22, 20, 22, 21, 20, 23, 30, 25, 22, 19, 19, 26, 68, 29, 20, 30, 52, 29, 12]),
        'josh': ('Joshua', 'Josh', 'Josh(?:ua)?', [18, 24, 17, 24, 15, 27, 26, 35, 27, 43, 23, 24, 33, 15, 63, 10, 18, 28, 51, 9, 45, 34, 16, 33]),
        'judg': ('Judges', 'Judg', 'Judg(?:es)?', [36, 23, 31, 24, 31, 40, 25, 35, 57, 18, 40, 15, 25, 20, 20, 31, 13, 31, 30, 48, 25]),
        'ruth': ('Ruth', 'Ruth', 'Ruth', [22, 23, 18, 22]),
        '1sam': ('1 Samuel', '1Sam', '(?:1|I)(?:\s)?Sam(?:uel)?', [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 15, 23, 29, 22, 44, 25, 12, 25, 11, 31, 13]),
        '2sam': ('2 Samuel', '2Sam', '(?:2|II)(?:\s)?Sam(?:uel)?', [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 33, 43, 26, 22, 51, 39, 25]),
        '1kgs': ('1 Kings', '1Kgs', '(?:1|I)(?:\s)?K(?:in)?gs', [53, 46, 28, 34, 18, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 53]),
        '2kgs': ('2 Kings', '2Kgs', '(?:2|II)(?:\s)?K(?:in)?gs', [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 21, 21, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30]),
        '1chr': ('1 Chronicles', '1Chr', '(?:1|I)(?:\s)?Chr(?:o(?:n(?:icles)?)?)?', [54, 55, 24, 43, 26, 81, 40, 40, 44, 14, 47, 40, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30]),
        '2chr': ('2 Chronicles', '2Chr', '(?:2|II)(?:\s)?Chr(?:o(?:n(?:icles)?)?)?', [17, 18, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 22, 15, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23]),
        'ezra': ('Ezra', 'Ezra', 'Ezra', [11, 70, 13, 24, 17, 22, 28, 36, 15, 44]),
        'neh': ('Nehemiah', 'Neh', 'Neh(?:emiah)?', [11, 20, 32, 23, 19, 19, 73, 18, 38, 39, 36, 47, 31]),
        'esth': ('Esther', 'Esth', 'Esth(?:er)?', [22, 23, 15, 17, 14, 14, 10, 17, 32, 3]),
        'job': ('Job', 'Job', 'Job', [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 24, 34, 17]),
        'ps': ('Psalms', 'Ps', 'Ps(?:a)?(?:lm(?:s)?)?', [6, 12, 8, 8, 12, 10, 17, 9, 20, 18, 7, 8, 6, 7, 5, 11, 15, 50, 14, 9, 13, 31, 6, 10, 22, 12, 14, 9, 11, 12, 24, 11, 22, 22, 28, 12, 40, 22, 13, 17, 13, 11, 5, 26, 17, 11, 9, 14, 20, 23, 19, 9, 6, 7, 23, 13, 11, 11, 17, 12, 8, 12, 11, 10, 13, 20, 7, 35, 36, 5, 24, 20, 28, 23, 10, 12, 20, 72, 13, 19, 16, 8, 18, 12, 13, 17, 7, 18, 52, 17, 16, 15, 5, 23, 11, 13, 12, 9, 9, 5, 8, 28, 22, 35, 45, 48, 43, 13, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 13, 10, 7, 12, 15, 21, 10, 20, 14, 9, 6]),
        'prov': ('Proverbs', 'Prov', 'Prov(?:erbs)?', [33, 22, 35, 27, 23, 35, 27, 36, 18, 32, 31, 28, 25, 35, 33, 33, 28, 24, 29, 30, 31, 29, 35, 34, 28, 28, 27, 28, 27, 33, 31]),
        'eccl': ('Ecclesiastes', 'Eccl', 'Ecc(?:l(?:es(?:iastes)?)?)?', [18, 26, 22, 16, 20, 12, 29, 17, 18, 20, 10, 14]),
        'song': ('Song of Solomon', 'Song', 'Song(?: of Sol(?:omon)?)?', [17, 17, 11, 16, 16, 13, 13, 14]),
        'isa': ('Isaiah', 'Isa', 'Isa(?:iah)?', [31, 22, 26, 6, 30, 13, 25, 22, 21, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 12, 25, 24]),
        'jer': ('Jeremiah', 'Jer', 'Jer(?:emiah)?', [19, 37, 25, 31, 31, 30, 34, 22, 26, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34]),
        'lam': ('Lamentations', 'Lam', 'Lam(?:entations)?', [22, 22, 66, 22, 22]),
        'ezek': ('Ezekiel', 'Ezek', 'Ezek(?:iel)?', [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 49, 32, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35]),
        'dan': ('Daniel', 'Dan', 'Dan(?:iel)?', [21, 49, 30, 37, 31, 28, 28, 27, 27, 21, 45, 13]),
        'hos': ('Hosea', 'Hos', 'Hos(?:ea)?', [11, 23, 5, 19, 15, 11, 16, 14, 17, 15, 12, 14, 16, 9]),
        'joel': ('Joel', 'Joel', 'Joel', [20, 32, 21]),
        'amos': ('Amos', 'Amos', 'Amos', [15, 16, 15, 13, 27, 14, 17, 14, 15]),
        'obad': ('Obadiah', 'Obad', 'Obad(?:iah)?', [21]),
        'jonah': ('Jonah', 'Jonah', 'Jon(?:ah)?', [17, 10, 10, 11]),
        'mic': ('Micah', 'Mic', 'Mic(?:ah)?', [16, 13, 12, 13, 15, 16, 20]),
        'nah': ('Nahum', 'Nah', 'Nah(?:um)?', [15, 13, 19]),
        'hab': ('Habakkuk', 'Hab', 'Hab(?:akkuk)?', [17, 20, 19]),
        'zeph': ('Zephaniah', 'Zeph', 'Zeph(?:aniah)?', [18, 15, 20]),
        'hag': ('Haggai', 'Hag', 'Hag(?:gai)?', [15, 23]),
        'zech': ('Zechariah', 'Zech', 'Zech(?:ariah)?', [21, 13, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21]),
        'mal': ('Malachi', 'Mal', 'Mal(?:achi)?', [14, 17, 18, 6]),
        'matt': ('Matthew', 'Matt', 'Matt(?:hew)?', [25, 23, 17, 25, 48, 34, 29, 34, 38, 42, 30, 50, 58, 36, 39, 28, 27, 35, 30, 34, 46, 46, 39, 51, 46, 75, 66, 20]),
        'mark': ('Mark', 'Mark', 'Mark', [45, 28, 35, 41, 43, 56, 37, 38, 50, 52, 33, 44, 37, 72, 47, 20]),
        'luke': ('Luke', 'Luke', 'Luke', [80, 52, 38, 44, 39, 49, 50, 56, 62, 42, 54, 59, 35, 35, 32, 31, 37, 43, 48, 47, 38, 71, 56, 53]),
        'john': ('John', 'John', '(?<!(?:1|2|3|I)\s)(?<!(?:1|2|3|I))John', [51, 25, 36, 54, 47, 71, 53, 59, 41, 42, 57, 50, 38, 31, 27, 33, 26, 40, 42, 31, 25]),
        'acts': ('Acts', 'Acts', 'Acts', [26, 47, 26, 37, 42, 15, 60, 40, 43, 48, 30, 25, 52, 28, 41, 40, 34, 28, 41, 38, 40, 30, 35, 27, 27, 32, 44, 31]),
        'rom': ('Romans', 'Rom', 'Rom(?:ans)?', [32, 29, 31, 25, 21, 23, 25, 39, 33, 21, 36, 21, 14, 23, 33, 27]),
        '1cor': ('1 Corinthians', '1Cor', '(?:1|I)(?:\s)?Cor(?:inthians)?', [31, 16, 23, 21, 13, 20, 40, 13, 27, 33, 34, 31, 13, 40, 58, 24]),
        '2cor': ('2 Corinthians', '2Cor', '(?:2|II)(?:\s)?Cor(?:inthians)?', [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 14]),
        'gal': ('Galatians', 'Gal', 'Gal(?:atians)?', [24, 21, 29, 31, 26, 18]),
        'eph': ('Ephesians', 'Eph', 'Eph(?:esians)?', [23, 22, 21, 32, 33, 24]),
        'phil': ('Philippians', 'Phil', 'Phil(?:ippians)?', [30, 30, 21, 23]),
        'col': ('Colossians', 'Col', 'Col(?:ossians)?', [29, 23, 25, 18]),
        '1thess': ('1 Thessalonians', '1Thess', '(?:1|I)(?:\s)?Thess(?:alonians)?', [10, 20, 13, 18, 28]),
        '2thess': ('2 Thessalonians', '2Thess', '(?:2|II)(?:\s)?Thess(?:alonians)?', [12, 17, 18]),
        '1tim': ('1 Timothy', '1Tim', '(?:1|I)(?:\s)?Tim(?:othy)?', [20, 15, 16, 16, 25, 21]),
        '2tim': ('2 Timothy', '2Tim', '(?:2|II)(?:\s)?Tim(?:othy)?', [18, 26, 17, 22]),
        'titus': ('Titus', 'Titus', 'Tit(?:us)?', [16, 15, 15]),
        'phlm': ('Philemon', 'Phlm', 'Phlm|Phile(?:m(?:on)?)?', [25]),
        'heb': ('Hebrews', 'Heb', 'Heb(?:rews)?', [14, 18, 19, 16, 14, 20, 28, 13, 28, 39, 40, 29, 25]),
        'jas': ('James', 'Jas', 'Ja(?:me)?s', [27, 26, 18, 17, 20]),
        '1pet': ('1 Peter', '1Pet', '(?:1|I)(?:\s)?Pet(?:er)?', [25, 25, 22, 19, 14]),
        '2pet': ('2 Peter', '2Pet', '(?:2|II)(?:\s)?Pet(?:er)?', [21, 22, 18]),
        '1john': ('1 John', '1John', '(?:(?:1|I)(?:\s)?)John', [10, 29, 24, 21, 21]),
        '2john': ('2 John', '2John', '(?:(?:2|II)(?:\s)?)John', [13]),
        '3john': ('3 John', '3John', '(?:(?:3|III)(?:\s)?)John', [15]),
        'jude': ('Jude', 'Jude', 'Jude', [25]),
        'rev': ('Revelation', 'Rev', 'Rev(?:elation)?(?:\sof Jesus Christ)?', [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 17, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]),
    }


niv = niv()

parser = argparse.ArgumentParser(description='Print out bible passage')
parser.add_argument('-p', '--passage', nargs='*', help='passage of scripture')
parser.add_argument('-v', '--version', default="NIV", help='Translation')
args = vars(parser.parse_args())

ref = ' '.join(args['passage'])
passage = ' '.join(args['passage'])
version = args['version']
passage = niv.extract(passage)
if passage == []:
    print(f"{ref} does not exist")
else:
    book = passage[0][0]
    chapter = passage[0][1]
    verse = passage[0][2]
    end_chapter = passage[0][3]
    end_verse = passage[0][4]
    verse_range = list(range(verse, end_verse + 1))
    reference = niv.reference_to_string(book, chapter, verse, end_chapter, end_verse)

    path = '/home/wadeallen/bibles/' + version + '/' + version + '.json'

    with open(path) as f:
        data = json.load(f)
        print(f'>({reference} {version}) ', end='')
        for v in verse_range:
            print(data[book][str(chapter)][str(v)], end=' ')


